#include <AccelStepper.h>

#define MOTOR_INTERFACE_TYPE 1

AccelStepper steppers[6] = {
  AccelStepper(MOTOR_INTERFACE_TYPE, 2, 3),   // U
  AccelStepper(MOTOR_INTERFACE_TYPE, 8, 9),   // D
  AccelStepper(MOTOR_INTERFACE_TYPE, 12, 13), // F
  AccelStepper(MOTOR_INTERFACE_TYPE, 6, 7),   // B
  AccelStepper(MOTOR_INTERFACE_TYPE, 10, 11), // L
  AccelStepper(MOTOR_INTERFACE_TYPE, 4, 5)    // R
};

const float MAX_SPEED = 2500;
const float ACCELERATION = 5000;
const int STEPS_PER_REVOLUTION = 200;
const int STEPS_PER_TURN = STEPS_PER_REVOLUTION / 4;

String inputBuffer = "";
bool commandReady = false;
bool moving = false;

void setup() {
  Serial.begin(9600);
  
  // Initialize all steppers with max speed and acceleration
  for (int i = 0; i < 6; i++) {
    steppers[i].setMaxSpeed(MAX_SPEED);
    steppers[i].setAcceleration(ACCELERATION);
  }
  
  Serial.println("READY");
}

void loop() {
  // Non-blocking serial read for commands
  while (Serial.available() > 0) {
    char c = Serial.read();
    if (c == '\n') {
      commandReady = true;
    } else {
      inputBuffer += c;
    }
  }

  // Process command if ready
  if (commandReady && !moving) {
    inputBuffer.trim();
    executeMove(inputBuffer);
    inputBuffer = "";
    commandReady = false;
  }

  // Run all motors in non-blocking mode
  for (int i = 0; i < 6; i++) {
    steppers[i].run();
  }
}

void executeMove(String move) {
  Serial.print("EXECUTING:");
  Serial.println(move);
  
  char face = move.charAt(0);
  char direction = (move.length() > 1) ? move.charAt(1) : ' ';
  
  int motorIndex = getFaceIndex(face);
  if (motorIndex == -1) {
    Serial.println("ERROR: Invalid face");
    return;
  }

  long steps = getStepsForMove(face, direction);

  // Enable motor outputs and queue move
  steppers[motorIndex].enableOutputs();
  steppers[motorIndex].move(steps);
  moving = true;

  // Wait until move is done
  while (steppers[motorIndex].distanceToGo() != 0) {
    steppers[motorIndex].run();
  }

  // Movement complete
  Serial.println("MOVE_COMPLETE");
  moving = false;
}

int getFaceIndex(char face) {
  switch(face) {
    case 'U': return 0;
    case 'D': return 1;
    case 'F': return 2;
    case 'B': return 3;
    case 'L': return 4;
    case 'R': return 5;
    default: return -1;
  }
}

long getStepsForMove(char face, char direction) {
  long steps = STEPS_PER_TURN;
  
  if (direction == '\'') {
    steps = -steps;
  } else if (direction == '2') {
    steps *= 2;
  }
  
  if (face == 'B') {
    steps = -steps;
    if (direction == '2') {
      steps = -steps;
    }
  }
  
  return steps;
}
